{"version":3,"sources":["js/cursor.js"],"names":["clientX","clientY","innerCursor","document","querySelector","initCursor","addEventListener","e","render","style","transform","requestAnimationFrame","lastX","lastY","isStuck","showCursor","group","stuckX","stuckY","fillOuterCursor","initCanvas","canvas","shapeBounds","width","height","paper","setup","strokeColor","strokeWidth","segments","radius","noiseScale","noiseRange","isNoisy","polygon","Path","RegularPolygon","Point","smooth","Group","applyMatrix","noiseObjects","map","SimplexNoise","bigCoordinates","lerp","a","b","n","value","in_min","in_max","out_min","out_max","view","onFrame","event","position","bounds","scale","forEach","segment","i","point","set","scaleDown","length","x","y","noiseX","noise2D","count","noiseY","distortionX","distortionY","newX","newY","initHovers","handleMouseEnter","navItem","currentTarget","navItemBox","getBoundingClientRect","Math","round","left","top","handleMouseLeave","linkItems","querySelectorAll","item"],"mappings":"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","file":"cursor.f70347af.js","sourceRoot":"..","sourcesContent":["// set the starting position of the cursor outside of the screen\r\nlet clientX = -100;\r\nlet clientY = -100;\r\nconst innerCursor = document.querySelector(\".cursor--small\");\r\n\r\nconst initCursor = () => {\r\n  // add listener to track the current mouse position\r\n  document.addEventListener(\"mousemove\", e => {\r\n    clientX = e.clientX;\r\n    clientY = e.clientY;\r\n  });\r\n  \r\n  // transform the innerCursor to the current mouse position\r\n  // use requestAnimationFrame() for smooth performance\r\n  const render = () => {\r\n    innerCursor.style.transform = `translate(${clientX}px, ${clientY}px)`;\r\n    \r\n    requestAnimationFrame(render);\r\n  };\r\n  requestAnimationFrame(render);\r\n};\r\n\r\ninitCursor();\r\n\r\nlet lastX = 0;\r\nlet lastY = 0;\r\nlet isStuck = false;\r\nlet showCursor = false;\r\nlet group, stuckX, stuckY, fillOuterCursor;\r\n\r\nconst initCanvas = () => {\r\n  const canvas = document.querySelector(\".cursor--canvas\");\r\n  const shapeBounds = {\r\n    width: 75,\r\n    height: 75\r\n  };\r\n  paper.setup(canvas);\r\n  const strokeColor = \"#eebbc3\";\r\n  const strokeWidth = 1;\r\n  const segments = 8;\r\n  const radius = 15;\r\n  \r\n  // we'll need these later for the noisy circle\r\n  const noiseScale = 150; // speed\r\n  const noiseRange = 4; // range of distortion\r\n  let isNoisy = false; // state\r\n  \r\n  // the base shape for the noisy circle\r\n  const polygon = new paper.Path.RegularPolygon(\r\n    new paper.Point(0, 0),\r\n    segments,\r\n    radius\r\n  );\r\n  polygon.strokeColor = strokeColor;\r\n  polygon.strokeWidth = strokeWidth;\r\n  polygon.smooth();\r\n  group = new paper.Group([polygon]);\r\n  group.applyMatrix = false;\r\n  \r\n  const noiseObjects = polygon.segments.map(() => new SimplexNoise());\r\n  let bigCoordinates = [];\r\n  \r\n  // function for linear interpolation of values\r\n  const lerp = (a, b, n) => {\r\n    return (1 - n) * a + n * b;\r\n  };\r\n  \r\n  // function to map a value from one range to another range\r\n  const map = (value, in_min, in_max, out_min, out_max) => {\r\n    return (\r\n      ((value - in_min) * (out_max - out_min)) / (in_max - in_min) + out_min\r\n    );\r\n  };\r\n  \r\n  // the draw loop of Paper.js\r\n// (60fps with requestAnimationFrame under the hood)\r\npaper.view.onFrame = event => {\r\n    // using linear interpolation, the circle will move 0.2 (20%)\r\n    // of the distance between its current position and the mouse\r\n    // coordinates per Frame\r\n    if (!isStuck) {\r\n      // move circle around normally\r\n      lastX = lerp(lastX, clientX, 0.2);\r\n      lastY = lerp(lastY, clientY, 0.2);\r\n      group.position = new paper.Point(lastX, lastY);\r\n    } else if (isStuck) {\r\n      // fixed position on a nav item\r\n      lastX = lerp(lastX, stuckX, 0.2);\r\n      lastY = lerp(lastY, stuckY, 0.2);\r\n      group.position = new paper.Point(lastX, lastY);\r\n    }\r\n    \r\n    if (isStuck && polygon.bounds.width < shapeBounds.width) { \r\n      // scale up the shape \r\n      polygon.scale(1.08);\r\n    } else if (!isStuck && polygon.bounds.width > 30) {\r\n      // remove noise\r\n      if (isNoisy) {\r\n        polygon.segments.forEach((segment, i) => {\r\n          segment.point.set(bigCoordinates[i][0], bigCoordinates[i][1]);\r\n        });\r\n        isNoisy = false;\r\n        bigCoordinates = [];\r\n      }\r\n      // scale down the shape\r\n      const scaleDown = 0.92;\r\n      polygon.scale(scaleDown);\r\n    }\r\n    \r\n    // while stuck and big, apply simplex noise\r\n    if (isStuck && polygon.bounds.width >= shapeBounds.width) {\r\n      isNoisy = true;\r\n      // first get coordinates of large circle\r\n      if (bigCoordinates.length === 0) {\r\n        polygon.segments.forEach((segment, i) => {\r\n          bigCoordinates[i] = [segment.point.x, segment.point.y];\r\n        });\r\n      }\r\n      \r\n      // loop over all points of the polygon\r\n      polygon.segments.forEach((segment, i) => {\r\n        \r\n        // get new noise value\r\n        // we divide event.count by noiseScale to get a very smooth value\r\n        const noiseX = noiseObjects[i].noise2D(event.count / noiseScale, 0);\r\n        const noiseY = noiseObjects[i].noise2D(event.count / noiseScale, 1);\r\n        \r\n        // map the noise value to our defined range\r\n        const distortionX = map(noiseX, -1, 1, -noiseRange, noiseRange);\r\n        const distortionY = map(noiseY, -1, 1, -noiseRange, noiseRange);\r\n        \r\n        // apply distortion to coordinates\r\n        const newX = bigCoordinates[i][0] + distortionX;\r\n        const newY = bigCoordinates[i][1] + distortionY;\r\n        \r\n        // set new (noisy) coodrindate of point\r\n        segment.point.set(newX, newY);\r\n      });\r\n      \r\n    }\r\n    polygon.smooth();\r\n  };\r\n}\r\n\r\ninitCanvas();\r\n\r\nconst initHovers = () => {\r\n\r\n    // find the center of the link element and set stuckX and stuckY\r\n    // these are needed to set the position of the noisy circle\r\n    const handleMouseEnter = e => {\r\n      const navItem = e.currentTarget;\r\n      const navItemBox = navItem.getBoundingClientRect();\r\n      stuckX = Math.round(navItemBox.left + navItemBox.width / 2);\r\n      stuckY = Math.round(navItemBox.top + navItemBox.height / 2);\r\n      isStuck = true;\r\n    };\r\n    \r\n    // reset isStuck on mouseLeave\r\n    const handleMouseLeave = () => {\r\n      isStuck = false;\r\n    };\r\n    \r\n    // add event listeners to all items\r\n    const linkItems = document.querySelectorAll(\".link\");\r\n    linkItems.forEach(item => {\r\n      item.addEventListener(\"mouseenter\", handleMouseEnter);\r\n      item.addEventListener(\"mouseleave\", handleMouseLeave);\r\n    });\r\n  };\r\n  \r\n  initHovers();\r\n"]}